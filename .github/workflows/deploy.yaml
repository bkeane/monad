name: deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  integration:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      id-token: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - name: setup build context
        uses: ./.github/actions/integration
      - name: setup buildx
        uses: docker/setup-buildx-action@v3 
        with:
          version: v0.23.0
      - name: make tar context
        run: |
          tar \
            --sort=name \
            --owner=0 --group=0 --numeric-owner \
            --mtime="@$(git log -1 --pretty=%ct)" \
            --format=gnu \
            -cf context.tar .
          aws s3 cp context.tar s3://kaixo-buildx-cache/ci-context.tar
      - name: build
        run: |
          # touch -d "@$(git log -1 --pretty=%ct)" e2e/echo/requirements.txt
          ECR_TAG=$(monad ecr tag --service echo) \
          SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) \
          docker buildx bake --progress=plain
      - name: layers
        run: |
          docker buildx du

  deployment:
    needs: integration
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        account: [dev, prod]
    environment:
      name: ${{ matrix.account }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup deployment context
        uses: ./.github/actions/deployment
        with:
          account: ${{ matrix.account }}
      - name: deploy
        working-directory: e2e/echo
        run: |
          monad deploy \
            --env file://.env.tmpl \
            --policy file://policy.json.tmpl \
            --rule file://rule.json.tmpl \
            --memory 256 \
            --disk 1024 \
            --timeout 10 \
            --api kaixo

  e2e:
    runs-on: ubuntu-24.04-arm
    needs: deployment
    env:
      TERM: xterm-color
      MONAD_SERVICE: echo
      AWS_DEFAULT_REGION: us-west-2
      MONAD_BRANCH: ${{ github.head_ref || github.ref_name }}
      MONAD_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        account: [dev, prod]
    environment:
      name: ${{ matrix.account }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup test context
        uses: ./.github/actions/hook
        with:
          account: ${{ matrix.account }}
          region: us-west-2
      - name: setup shellspec
        uses: ./.github/actions/e2e
      - name: health
        working-directory: e2e
        run: shellspec --color spec/health/sigv4_spec.sh
      - name: lambda
        working-directory: e2e
        run: shellspec --color spec/config/lambda_spec.sh
      - name: apigatewayv2
        working-directory: e2e
        run: shellspec --color spec/config/apigatewayv2_spec.sh
      - name: eventbridge
        working-directory: e2e
        run: shellspec --color spec/config/eventbridge_spec.sh
